// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BL
Rcpp::List BL(arma::vec y, arma:: mat x, arma:: mat c, int maxSteps, arma:: vec hatEta, arma::vec hatb, arma:: vec hatInvTauSq2, arma:: mat invSigb0, double hatLambdaSqStar2, double hatSigmaSq, double aStar, double bStar, double alpha, double gamma, int progress);
RcppExport SEXP _Bayenet_BL(SEXP ySEXP, SEXP xSEXP, SEXP cSEXP, SEXP maxStepsSEXP, SEXP hatEtaSEXP, SEXP hatbSEXP, SEXP hatInvTauSq2SEXP, SEXP invSigb0SEXP, SEXP hatLambdaSqStar2SEXP, SEXP hatSigmaSqSEXP, SEXP aStarSEXP, SEXP bStarSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type hatEta(hatEtaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatb(hatbSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type hatInvTauSq2(hatInvTauSq2SEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type invSigb0(invSigb0SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSqStar2(hatLambdaSqStar2SEXP);
    Rcpp::traits::input_parameter< double >::type hatSigmaSq(hatSigmaSqSEXP);
    Rcpp::traits::input_parameter< double >::type aStar(aStarSEXP);
    Rcpp::traits::input_parameter< double >::type bStar(bStarSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(BL(y, x, c, maxSteps, hatEta, hatb, hatInvTauSq2, invSigb0, hatLambdaSqStar2, hatSigmaSq, aStar, bStar, alpha, gamma, progress));
    return rcpp_result_gen;
END_RCPP
}
// BLSS
Rcpp::List BLSS(arma::vec y, arma:: mat x, arma:: mat c, int maxSteps, arma:: vec hatEta, arma::vec hatb, arma:: vec hatInvTauSq2, arma::vec sg2, double hatPiEta, arma:: mat invSigb0, double hatLambdaSqStar2, double hatSigmaSq, double aStar, double bStar, double alpha, double gamma, double mu0, double nu0, int progress);
RcppExport SEXP _Bayenet_BLSS(SEXP ySEXP, SEXP xSEXP, SEXP cSEXP, SEXP maxStepsSEXP, SEXP hatEtaSEXP, SEXP hatbSEXP, SEXP hatInvTauSq2SEXP, SEXP sg2SEXP, SEXP hatPiEtaSEXP, SEXP invSigb0SEXP, SEXP hatLambdaSqStar2SEXP, SEXP hatSigmaSqSEXP, SEXP aStarSEXP, SEXP bStarSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP mu0SEXP, SEXP nu0SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type hatEta(hatEtaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatb(hatbSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type hatInvTauSq2(hatInvTauSq2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sg2(sg2SEXP);
    Rcpp::traits::input_parameter< double >::type hatPiEta(hatPiEtaSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type invSigb0(invSigb0SEXP);
    Rcpp::traits::input_parameter< double >::type hatLambdaSqStar2(hatLambdaSqStar2SEXP);
    Rcpp::traits::input_parameter< double >::type hatSigmaSq(hatSigmaSqSEXP);
    Rcpp::traits::input_parameter< double >::type aStar(aStarSEXP);
    Rcpp::traits::input_parameter< double >::type bStar(bStarSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(BLSS(y, x, c, maxSteps, hatEta, hatb, hatInvTauSq2, sg2, hatPiEta, invSigb0, hatLambdaSqStar2, hatSigmaSq, aStar, bStar, alpha, gamma, mu0, nu0, progress));
    return rcpp_result_gen;
END_RCPP
}
// QBL
Rcpp::List QBL(arma::vec y, arma:: mat x, arma:: mat c, int maxSteps, arma::vec hatb, arma::vec hatEta, double hatTau, arma::vec hatV, arma:: vec hatSg2, arma:: mat invSigb0, double hatEtaSq2, double theta, double r, double a, double b, int progress);
RcppExport SEXP _Bayenet_QBL(SEXP ySEXP, SEXP xSEXP, SEXP cSEXP, SEXP maxStepsSEXP, SEXP hatbSEXP, SEXP hatEtaSEXP, SEXP hatTauSEXP, SEXP hatVSEXP, SEXP hatSg2SEXP, SEXP invSigb0SEXP, SEXP hatEtaSq2SEXP, SEXP thetaSEXP, SEXP rSEXP, SEXP aSEXP, SEXP bSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatb(hatbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatEta(hatEtaSEXP);
    Rcpp::traits::input_parameter< double >::type hatTau(hatTauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatV(hatVSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type hatSg2(hatSg2SEXP);
    Rcpp::traits::input_parameter< arma:: mat >::type invSigb0(invSigb0SEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq2(hatEtaSq2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(QBL(y, x, c, maxSteps, hatb, hatEta, hatTau, hatV, hatSg2, invSigb0, hatEtaSq2, theta, r, a, b, progress));
    return rcpp_result_gen;
END_RCPP
}
// QBLSS
Rcpp::List QBLSS(arma::vec y, arma::mat x, arma::mat c, int maxSteps, arma::vec hatAlpha, arma::vec hatBeta, double hatTau, arma::vec hatV, arma::vec hatSg, arma:: vec ss2, arma::mat invSigAlpha0, double hatPi, double hatEtaSq, double theta, double r1, double a, double b, double sh1, double sh0, int progress);
RcppExport SEXP _Bayenet_QBLSS(SEXP ySEXP, SEXP xSEXP, SEXP cSEXP, SEXP maxStepsSEXP, SEXP hatAlphaSEXP, SEXP hatBetaSEXP, SEXP hatTauSEXP, SEXP hatVSEXP, SEXP hatSgSEXP, SEXP ss2SEXP, SEXP invSigAlpha0SEXP, SEXP hatPiSEXP, SEXP hatEtaSqSEXP, SEXP thetaSEXP, SEXP r1SEXP, SEXP aSEXP, SEXP bSEXP, SEXP sh1SEXP, SEXP sh0SEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type maxSteps(maxStepsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatAlpha(hatAlphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatBeta(hatBetaSEXP);
    Rcpp::traits::input_parameter< double >::type hatTau(hatTauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatV(hatVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hatSg(hatSgSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type ss2(ss2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigAlpha0(invSigAlpha0SEXP);
    Rcpp::traits::input_parameter< double >::type hatPi(hatPiSEXP);
    Rcpp::traits::input_parameter< double >::type hatEtaSq(hatEtaSqSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type sh1(sh1SEXP);
    Rcpp::traits::input_parameter< double >::type sh0(sh0SEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(QBLSS(y, x, c, maxSteps, hatAlpha, hatBeta, hatTau, hatV, hatSg, ss2, invSigAlpha0, hatPi, hatEtaSq, theta, r1, a, b, sh1, sh0, progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Bayenet_BL", (DL_FUNC) &_Bayenet_BL, 15},
    {"_Bayenet_BLSS", (DL_FUNC) &_Bayenet_BLSS, 19},
    {"_Bayenet_QBL", (DL_FUNC) &_Bayenet_QBL, 16},
    {"_Bayenet_QBLSS", (DL_FUNC) &_Bayenet_QBLSS, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_Bayenet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
